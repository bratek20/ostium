// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.kaijugame.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.gamesmanagement.fixtures.*

import com.github.bratek20.ostium.kaijugame.api.*

fun assertAttackReceiver(given: AttackReceiver, expectedInit: ExpectedAttackReceiver.() -> Unit) {
    val diff = diffAttackReceiver(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertAttackGiver(given: AttackGiver, expectedInit: ExpectedAttackGiver.() -> Unit) {
    val diff = diffAttackGiver(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertPlayerSide(given: PlayerSide, expectedInit: ExpectedPlayerSide.() -> Unit) {
    val diff = diffPlayerSide(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertHitZone(given: HitZone, expectedInit: ExpectedHitZone.() -> Unit) {
    val diff = diffHitZone(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertAttackPool(given: AttackPool, expectedInit: ExpectedAttackPool.() -> Unit) {
    val diff = diffAttackPool(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertTable(given: Table, expectedInit: ExpectedTable.() -> Unit) {
    val diff = diffTable(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertCard(given: Card, expectedInit: ExpectedCard.() -> Unit) {
    val diff = diffCard(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertHand(given: Hand, expectedInit: ExpectedHand.() -> Unit) {
    val diff = diffHand(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertGameState(given: GameState, expectedInit: ExpectedGameState.() -> Unit) {
    val diff = diffGameState(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}