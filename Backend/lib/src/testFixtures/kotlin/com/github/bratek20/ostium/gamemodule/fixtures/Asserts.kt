// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.gamemodule.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.ostium.gamemodule.api.*

fun assertGateDurabilityMarker(given: GateDurabilityMarker, expected: Int) {
    val diff = diffGateDurabilityMarker(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}


fun assertCreatureCardId(given: CreatureCardId, expected: String) {
    val diff = diffCreatureCardId(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertCreatureCard(given: CreatureCard, expectedInit: ExpectedCreatureCard.() -> Unit) {
    val diff = diffCreatureCard(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertGateCard(given: GateCard, expectedInit: ExpectedGateCard.() -> Unit) {
    val diff = diffGateCard(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertGateDurabilityCard(given: GateDurabilityCard, expectedInit: ExpectedGateDurabilityCard.() -> Unit) {
    val diff = diffGateDurabilityCard(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertRow(given: Row, expectedInit: ExpectedRow.() -> Unit) {
    val diff = diffRow(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertTable(given: Table, expectedInit: ExpectedTable.() -> Unit) {
    val diff = diffTable(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertHand(given: Hand, expectedInit: ExpectedHand.() -> Unit) {
    val diff = diffHand(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertGame(given: Game, expectedInit: ExpectedGame.() -> Unit) {
    val diff = diffGame(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}