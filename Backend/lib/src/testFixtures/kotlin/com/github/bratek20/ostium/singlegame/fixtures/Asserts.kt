// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.singlegame.fixtures

import org.assertj.core.api.Assertions.assertThat

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.gamesmanagement.fixtures.*
import com.github.bratek20.ostium.user.api.*
import com.github.bratek20.ostium.user.fixtures.*

import com.github.bratek20.ostium.singlegame.api.*

fun assertCreatureCardId(given: CreatureCardId, expected: String) {
    val diff = diffCreatureCardId(given, expected)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertCreatureCard(given: CreatureCard, expectedInit: ExpectedCreatureCard.() -> Unit) {
    val diff = diffCreatureCard(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertRow(given: Row, expectedInit: ExpectedRow.() -> Unit) {
    val diff = diffRow(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertPlayerSide(given: PlayerSide, expectedInit: ExpectedPlayerSide.() -> Unit) {
    val diff = diffPlayerSide(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertTable(given: Table, expectedInit: ExpectedTable.() -> Unit) {
    val diff = diffTable(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertHand(given: Hand, expectedInit: ExpectedHand.() -> Unit) {
    val diff = diffHand(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}

fun assertGameState(given: GameState, expectedInit: ExpectedGameState.() -> Unit) {
    val diff = diffGameState(given, expectedInit)
    assertThat(diff).withFailMessage(diff).isEqualTo("")
}