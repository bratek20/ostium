// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.kajiugame.fixtures

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.gamesmanagement.fixtures.*

import com.github.bratek20.ostium.kajiugame.api.*

fun diffDamageType(given: DamageType, expected: String, path: String = ""): String {
    if (given != DamageType.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

fun diffTurnPhase(given: TurnPhase, expected: String, path: String = ""): String {
    if (given != TurnPhase.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedAttackReceiver(
    var type: String? = null,
    var myDamage: Int? = null,
    var opponentDamage: Int? = null,
)
fun diffAttackReceiver(given: AttackReceiver, expectedInit: ExpectedAttackReceiver.() -> Unit, path: String = ""): String {
    val expected = ExpectedAttackReceiver().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffDamageType(given.getType(), it) != "") { result.add(diffDamageType(given.getType(), it, "${path}type.")) }
    }

    expected.myDamage?.let {
        if (given.getMyDamage() != it) { result.add("${path}myDamage ${given.getMyDamage()} != ${it}") }
    }

    expected.opponentDamage?.let {
        if (given.getOpponentDamage() != it) { result.add("${path}opponentDamage ${given.getOpponentDamage()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedAttackGiver(
    var type: String? = null,
    var damageValue: Int? = null,
)
fun diffAttackGiver(given: AttackGiver, expectedInit: ExpectedAttackGiver.() -> Unit, path: String = ""): String {
    val expected = ExpectedAttackGiver().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffDamageType(given.getType(), it) != "") { result.add(diffDamageType(given.getType(), it, "${path}type.")) }
    }

    expected.damageValue?.let {
        if (given.getDamageValue() != it) { result.add("${path}damageValue ${given.getDamageValue()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedPlayerSide(
    var pool: (ExpectedAttackPool.() -> Unit)? = null,
    var playedCards: List<(ExpectedCard.() -> Unit)>? = null,
)
fun diffPlayerSide(given: PlayerSide, expectedInit: ExpectedPlayerSide.() -> Unit, path: String = ""): String {
    val expected = ExpectedPlayerSide().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.pool?.let {
        if (diffAttackPool(given.getPool(), it) != "") { result.add(diffAttackPool(given.getPool(), it, "${path}pool.")) }
    }

    expected.playedCards?.let {
        if (given.getPlayedCards().size != it.size) { result.add("${path}playedCards size ${given.getPlayedCards().size} != ${it.size}"); return@let }
        given.getPlayedCards().forEachIndexed { idx, entry -> if (diffCard(entry, it[idx]) != "") { result.add(diffCard(entry, it[idx], "${path}playedCards[${idx}].")) } }
    }

    return result.joinToString("\n")
}

data class ExpectedHitZone(
    var leftReceiver: (ExpectedAttackReceiver.() -> Unit)? = null,
    var centerReceiver: (ExpectedAttackReceiver.() -> Unit)? = null,
    var rightReceiver: (ExpectedAttackReceiver.() -> Unit)? = null,
)
fun diffHitZone(given: HitZone, expectedInit: ExpectedHitZone.() -> Unit, path: String = ""): String {
    val expected = ExpectedHitZone().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.leftReceiver?.let {
        if (diffAttackReceiver(given.getLeftReceiver(), it) != "") { result.add(diffAttackReceiver(given.getLeftReceiver(), it, "${path}leftReceiver.")) }
    }

    expected.centerReceiver?.let {
        if (diffAttackReceiver(given.getCenterReceiver(), it) != "") { result.add(diffAttackReceiver(given.getCenterReceiver(), it, "${path}centerReceiver.")) }
    }

    expected.rightReceiver?.let {
        if (diffAttackReceiver(given.getRightReceiver(), it) != "") { result.add(diffAttackReceiver(given.getRightReceiver(), it, "${path}rightReceiver.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedAttackPool(
    var attackGivers: List<(ExpectedAttackGiver.() -> Unit)>? = null,
    var focusLeft: Int? = null,
)
fun diffAttackPool(given: AttackPool, expectedInit: ExpectedAttackPool.() -> Unit, path: String = ""): String {
    val expected = ExpectedAttackPool().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.attackGivers?.let {
        if (given.getAttackGivers().size != it.size) { result.add("${path}attackGivers size ${given.getAttackGivers().size} != ${it.size}"); return@let }
        given.getAttackGivers().forEachIndexed { idx, entry -> if (diffAttackGiver(entry, it[idx]) != "") { result.add(diffAttackGiver(entry, it[idx], "${path}attackGivers[${idx}].")) } }
    }

    expected.focusLeft?.let {
        if (given.getFocusLeft() != it) { result.add("${path}focusLeft ${given.getFocusLeft()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedTable(
    var leftZone: (ExpectedHitZone.() -> Unit)? = null,
    var centerZone: (ExpectedHitZone.() -> Unit)? = null,
    var rightZone: (ExpectedHitZone.() -> Unit)? = null,
    var mySide: (ExpectedPlayerSide.() -> Unit)? = null,
    var opponentSide: (ExpectedPlayerSide.() -> Unit)? = null,
)
fun diffTable(given: Table, expectedInit: ExpectedTable.() -> Unit, path: String = ""): String {
    val expected = ExpectedTable().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.leftZone?.let {
        if (diffHitZone(given.getLeftZone(), it) != "") { result.add(diffHitZone(given.getLeftZone(), it, "${path}leftZone.")) }
    }

    expected.centerZone?.let {
        if (diffHitZone(given.getCenterZone(), it) != "") { result.add(diffHitZone(given.getCenterZone(), it, "${path}centerZone.")) }
    }

    expected.rightZone?.let {
        if (diffHitZone(given.getRightZone(), it) != "") { result.add(diffHitZone(given.getRightZone(), it, "${path}rightZone.")) }
    }

    expected.mySide?.let {
        if (diffPlayerSide(given.getMySide(), it) != "") { result.add(diffPlayerSide(given.getMySide(), it, "${path}mySide.")) }
    }

    expected.opponentSide?.let {
        if (diffPlayerSide(given.getOpponentSide(), it) != "") { result.add(diffPlayerSide(given.getOpponentSide(), it, "${path}opponentSide.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedCard(
    var type: String? = null,
    var value: Int? = null,
    var focusCost: Int? = null,
)
fun diffCard(given: Card, expectedInit: ExpectedCard.() -> Unit, path: String = ""): String {
    val expected = ExpectedCard().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.type?.let {
        if (diffDamageType(given.getType(), it) != "") { result.add(diffDamageType(given.getType(), it, "${path}type.")) }
    }

    expected.value?.let {
        if (given.getValue() != it) { result.add("${path}value ${given.getValue()} != ${it}") }
    }

    expected.focusCost?.let {
        if (given.getFocusCost() != it) { result.add("${path}focusCost ${given.getFocusCost()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedHand(
    var cards: List<(ExpectedCard.() -> Unit)>? = null,
)
fun diffHand(given: Hand, expectedInit: ExpectedHand.() -> Unit, path: String = ""): String {
    val expected = ExpectedHand().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.cards?.let {
        if (given.getCards().size != it.size) { result.add("${path}cards size ${given.getCards().size} != ${it.size}"); return@let }
        given.getCards().forEachIndexed { idx, entry -> if (diffCard(entry, it[idx]) != "") { result.add(diffCard(entry, it[idx], "${path}cards[${idx}].")) } }
    }

    return result.joinToString("\n")
}

data class ExpectedGameState(
    var turn: Int? = null,
    var phase: String? = null,
    var table: (ExpectedTable.() -> Unit)? = null,
    var hand: (ExpectedHand.() -> Unit)? = null,
    var myReady: Boolean? = null,
    var opponentReady: Boolean? = null,
)
fun diffGameState(given: GameState, expectedInit: ExpectedGameState.() -> Unit, path: String = ""): String {
    val expected = ExpectedGameState().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.turn?.let {
        if (given.getTurn() != it) { result.add("${path}turn ${given.getTurn()} != ${it}") }
    }

    expected.phase?.let {
        if (diffTurnPhase(given.getPhase(), it) != "") { result.add(diffTurnPhase(given.getPhase(), it, "${path}phase.")) }
    }

    expected.table?.let {
        if (diffTable(given.getTable(), it) != "") { result.add(diffTable(given.getTable(), it, "${path}table.")) }
    }

    expected.hand?.let {
        if (diffHand(given.getHand(), it) != "") { result.add(diffHand(given.getHand(), it, "${path}hand.")) }
    }

    expected.myReady?.let {
        if (given.getMyReady() != it) { result.add("${path}myReady ${given.getMyReady()} != ${it}") }
    }

    expected.opponentReady?.let {
        if (given.getOpponentReady() != it) { result.add("${path}opponentReady ${given.getOpponentReady()} != ${it}") }
    }

    return result.joinToString("\n")
}