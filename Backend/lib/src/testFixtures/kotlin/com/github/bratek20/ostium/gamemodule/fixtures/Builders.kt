// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.gamemodule.fixtures

import com.github.bratek20.ostium.gamemodule.api.*

fun gateDurabilityMarker(value: Int = 0): GateDurabilityMarker {
    return GateDurabilityMarker(value)
}

fun creatureCardId(value: String = "someValue"): CreatureCardId {
    return CreatureCardId(value)
}

data class CreatureCardDef(
    var id: String = "someValue",
)
fun creatureCard(init: CreatureCardDef.() -> Unit = {}): CreatureCard {
    val def = CreatureCardDef().apply(init)
    return CreatureCard.create(
        id = CreatureCardId(def.id),
    )
}

data class GateCardDef(
    var destroyed: Boolean = false,
)
fun gateCard(init: GateCardDef.() -> Unit = {}): GateCard {
    val def = GateCardDef().apply(init)
    return GateCard.create(
        destroyed = def.destroyed,
    )
}

data class GateDurabilityCardDef(
    var myMarker: Int = 0,
    var opponentMarker: Int = 0,
)
fun gateDurabilityCard(init: GateDurabilityCardDef.() -> Unit = {}): GateDurabilityCard {
    val def = GateDurabilityCardDef().apply(init)
    return GateDurabilityCard.create(
        myMarker = GateDurabilityMarker(def.myMarker),
        opponentMarker = GateDurabilityMarker(def.opponentMarker),
    )
}

data class RowDef(
    var type: String = RowType.ATTACK.name,
    var card: (CreatureCardDef.() -> Unit)? = null,
)
fun row(init: RowDef.() -> Unit = {}): Row {
    val def = RowDef().apply(init)
    return Row.create(
        type = RowType.valueOf(def.type),
        card = def.card?.let { it -> creatureCard(it) },
    )
}

data class TableDef(
    var gateDurabilityCard: (GateDurabilityCardDef.() -> Unit) = {},
    var attackRow: (RowDef.() -> Unit) = {},
    var defenseRow: (RowDef.() -> Unit) = {},
    var gateCard: (GateCardDef.() -> Unit) = {},
)
fun table(init: TableDef.() -> Unit = {}): Table {
    val def = TableDef().apply(init)
    return Table.create(
        gateDurabilityCard = gateDurabilityCard(def.gateDurabilityCard),
        attackRow = row(def.attackRow),
        defenseRow = row(def.defenseRow),
        gateCard = gateCard(def.gateCard),
    )
}

data class HandDef(
    var cards: List<(CreatureCardDef.() -> Unit)> = emptyList(),
)
fun hand(init: HandDef.() -> Unit = {}): Hand {
    val def = HandDef().apply(init)
    return Hand.create(
        cards = def.cards.map { it -> creatureCard(it) },
    )
}

data class GameDef(
    var table: (TableDef.() -> Unit) = {},
    var hand: (HandDef.() -> Unit) = {},
)
fun game(init: GameDef.() -> Unit = {}): Game {
    val def = GameDef().apply(init)
    return Game.create(
        table = table(def.table),
        hand = hand(def.hand),
    )
}