// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.singlegame.fixtures

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.gamesmanagement.fixtures.*
import com.github.bratek20.ostium.user.api.*
import com.github.bratek20.ostium.user.fixtures.*

import com.github.bratek20.ostium.singlegame.api.*

fun creatureCardId(value: String = "someValue"): CreatureCardId {
    return CreatureCardId(value)
}

data class CreatureCardDef(
    var id: String = "someValue",
)
fun creatureCard(init: CreatureCardDef.() -> Unit = {}): CreatureCard {
    val def = CreatureCardDef().apply(init)
    return CreatureCard.create(
        id = CreatureCardId(def.id),
    )
}

data class RowDef(
    var type: String = RowType.ATTACK.name,
    var card: (CreatureCardDef.() -> Unit)? = null,
)
fun row(init: RowDef.() -> Unit = {}): Row {
    val def = RowDef().apply(init)
    return Row.create(
        type = RowType.valueOf(def.type),
        card = def.card?.let { it -> creatureCard(it) },
    )
}

data class PlayerSideDef(
    var attackRow: (RowDef.() -> Unit) = {},
    var defenseRow: (RowDef.() -> Unit) = {},
)
fun playerSide(init: PlayerSideDef.() -> Unit = {}): PlayerSide {
    val def = PlayerSideDef().apply(init)
    return PlayerSide.create(
        attackRow = row(def.attackRow),
        defenseRow = row(def.defenseRow),
    )
}

data class TableDef(
    var mySide: (PlayerSideDef.() -> Unit) = {},
    var opponentSide: (PlayerSideDef.() -> Unit) = {},
)
fun table(init: TableDef.() -> Unit = {}): Table {
    val def = TableDef().apply(init)
    return Table.create(
        mySide = playerSide(def.mySide),
        opponentSide = playerSide(def.opponentSide),
    )
}

data class HandDef(
    var cards: List<(CreatureCardDef.() -> Unit)> = emptyList(),
)
fun hand(init: HandDef.() -> Unit = {}): Hand {
    val def = HandDef().apply(init)
    return Hand.create(
        cards = def.cards.map { it -> creatureCard(it) },
    )
}

data class GameStateDef(
    var table: (TableDef.() -> Unit) = {},
    var myHand: (HandDef.() -> Unit) = {},
    var opponentHand: (HandDef.() -> Unit) = {},
    var myName: String = "someValue",
    var opponentName: String? = null,
)
fun gameState(init: GameStateDef.() -> Unit = {}): GameState {
    val def = GameStateDef().apply(init)
    return GameState.create(
        table = table(def.table),
        myHand = hand(def.myHand),
        opponentHand = hand(def.opponentHand),
        myName = Username(def.myName),
        opponentName = def.opponentName?.let { it -> Username(it) },
    )
}