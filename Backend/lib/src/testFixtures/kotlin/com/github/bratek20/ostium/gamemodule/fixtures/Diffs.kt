// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.gamemodule.fixtures

import com.github.bratek20.ostium.gamemodule.api.*

fun diffGateDurabilityMarker(given: GateDurabilityMarker, expected: Int, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffCreatureCardId(given: CreatureCardId, expected: String, path: String = ""): String {
    if (given.value != expected) { return "${path}value ${given.value} != ${expected}" }
    return ""
}

fun diffRowType(given: RowType, expected: String, path: String = ""): String {
    if (given != RowType.valueOf(expected)) { return "${path}value ${given.name} != ${expected}" }
    return ""
}

data class ExpectedCreatureCard(
    var id: String? = null,
)
fun diffCreatureCard(given: CreatureCard, expectedInit: ExpectedCreatureCard.() -> Unit, path: String = ""): String {
    val expected = ExpectedCreatureCard().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.id?.let {
        if (diffCreatureCardId(given.getId(), it) != "") { result.add(diffCreatureCardId(given.getId(), it, "${path}id.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedGateCard(
    var destroyed: Boolean? = null,
)
fun diffGateCard(given: GateCard, expectedInit: ExpectedGateCard.() -> Unit, path: String = ""): String {
    val expected = ExpectedGateCard().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.destroyed?.let {
        if (given.getDestroyed() != it) { result.add("${path}destroyed ${given.getDestroyed()} != ${it}") }
    }

    return result.joinToString("\n")
}

data class ExpectedGateDurabilityCard(
    var myMarker: Int? = null,
    var opponentMarker: Int? = null,
)
fun diffGateDurabilityCard(given: GateDurabilityCard, expectedInit: ExpectedGateDurabilityCard.() -> Unit, path: String = ""): String {
    val expected = ExpectedGateDurabilityCard().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.myMarker?.let {
        if (diffGateDurabilityMarker(given.getMyMarker(), it) != "") { result.add(diffGateDurabilityMarker(given.getMyMarker(), it, "${path}myMarker.")) }
    }

    expected.opponentMarker?.let {
        if (diffGateDurabilityMarker(given.getOpponentMarker(), it) != "") { result.add(diffGateDurabilityMarker(given.getOpponentMarker(), it, "${path}opponentMarker.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedRow(
    var cardEmpty: Boolean? = null,
    var card: (ExpectedCreatureCard.() -> Unit)? = null,
)
fun diffRow(given: Row, expectedInit: ExpectedRow.() -> Unit, path: String = ""): String {
    val expected = ExpectedRow().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.cardEmpty?.let {
        if ((given.getCard() == null) != it) { result.add("${path}card empty ${(given.getCard() == null)} != ${it}") }
    }

    expected.card?.let {
        if (diffCreatureCard(given.getCard()!!, it) != "") { result.add(diffCreatureCard(given.getCard()!!, it, "${path}card.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedTable(
    var gateDurabilityCard: (ExpectedGateDurabilityCard.() -> Unit)? = null,
    var attackRow: (ExpectedRow.() -> Unit)? = null,
    var defenseRow: (ExpectedRow.() -> Unit)? = null,
    var gateCard: (ExpectedGateCard.() -> Unit)? = null,
)
fun diffTable(given: Table, expectedInit: ExpectedTable.() -> Unit, path: String = ""): String {
    val expected = ExpectedTable().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.gateDurabilityCard?.let {
        if (diffGateDurabilityCard(given.getGateDurabilityCard(), it) != "") { result.add(diffGateDurabilityCard(given.getGateDurabilityCard(), it, "${path}gateDurabilityCard.")) }
    }

    expected.attackRow?.let {
        if (diffRow(given.getAttackRow(), it) != "") { result.add(diffRow(given.getAttackRow(), it, "${path}attackRow.")) }
    }

    expected.defenseRow?.let {
        if (diffRow(given.getDefenseRow(), it) != "") { result.add(diffRow(given.getDefenseRow(), it, "${path}defenseRow.")) }
    }

    expected.gateCard?.let {
        if (diffGateCard(given.getGateCard(), it) != "") { result.add(diffGateCard(given.getGateCard(), it, "${path}gateCard.")) }
    }

    return result.joinToString("\n")
}

data class ExpectedHand(
    var cards: List<(ExpectedCreatureCard.() -> Unit)>? = null,
)
fun diffHand(given: Hand, expectedInit: ExpectedHand.() -> Unit, path: String = ""): String {
    val expected = ExpectedHand().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.cards?.let {
        if (given.getCards().size != it.size) { result.add("${path}cards size ${given.getCards().size} != ${it.size}"); return@let }
        given.getCards().forEachIndexed { idx, entry -> if (diffCreatureCard(entry, it[idx]) != "") { result.add(diffCreatureCard(entry, it[idx], "${path}cards[${idx}].")) } }
    }

    return result.joinToString("\n")
}

data class ExpectedGame(
    var table: (ExpectedTable.() -> Unit)? = null,
    var hand: (ExpectedHand.() -> Unit)? = null,
)
fun diffGame(given: Game, expectedInit: ExpectedGame.() -> Unit, path: String = ""): String {
    val expected = ExpectedGame().apply(expectedInit)
    val result: MutableList<String> = mutableListOf()

    expected.table?.let {
        if (diffTable(given.getTable(), it) != "") { result.add(diffTable(given.getTable(), it, "${path}table.")) }
    }

    expected.hand?.let {
        if (diffHand(given.getHand(), it) != "") { result.add(diffHand(given.getHand(), it, "${path}hand.")) }
    }

    return result.joinToString("\n")
}