// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.kajiugame.api

import com.github.bratek20.ostium.gamesmanagement.api.*

data class AttackReceiver(
    private val type: String,
    private val myDamage: Int,
    private val opponentDamage: Int,
) {
    fun getType(): DamageType {
        return DamageType.valueOf(this.type)
    }

    fun getMyDamage(): Int {
        return this.myDamage
    }

    fun getOpponentDamage(): Int {
        return this.opponentDamage
    }

    companion object {
        fun create(
            type: DamageType,
            myDamage: Int,
            opponentDamage: Int,
        ): AttackReceiver {
            return AttackReceiver(
                type = type.name,
                myDamage = myDamage,
                opponentDamage = opponentDamage,
            )
        }
    }
}

data class AttackGiver(
    private val type: String,
    private val damageValue: Int,
) {
    fun getType(): DamageType {
        return DamageType.valueOf(this.type)
    }

    fun getDamageValue(): Int {
        return this.damageValue
    }

    companion object {
        fun create(
            type: DamageType,
            damageValue: Int,
        ): AttackGiver {
            return AttackGiver(
                type = type.name,
                damageValue = damageValue,
            )
        }
    }
}

data class PlayerSide(
    private val pool: AttackPool,
    private val playedCards: List<Card>,
) {
    fun getPool(): AttackPool {
        return this.pool
    }

    fun getPlayedCards(): List<Card> {
        return this.playedCards
    }

    companion object {
        fun create(
            pool: AttackPool,
            playedCards: List<Card>,
        ): PlayerSide {
            return PlayerSide(
                pool = pool,
                playedCards = playedCards,
            )
        }
    }
}

data class HitZone(
    private val position: String,
    private val lightReceiver: AttackReceiver,
    private val mediumReceiver: AttackReceiver,
    private val heavyReceiver: AttackReceiver,
) {
    fun getPosition(): HitZonePosition {
        return HitZonePosition.valueOf(this.position)
    }

    fun getLightReceiver(): AttackReceiver {
        return this.lightReceiver
    }

    fun getMediumReceiver(): AttackReceiver {
        return this.mediumReceiver
    }

    fun getHeavyReceiver(): AttackReceiver {
        return this.heavyReceiver
    }

    companion object {
        fun create(
            position: HitZonePosition,
            lightReceiver: AttackReceiver,
            mediumReceiver: AttackReceiver,
            heavyReceiver: AttackReceiver,
        ): HitZone {
            return HitZone(
                position = position.name,
                lightReceiver = lightReceiver,
                mediumReceiver = mediumReceiver,
                heavyReceiver = heavyReceiver,
            )
        }
    }
}

data class AttackPool(
    private val lightGiver: AttackGiver,
    private val mediumGiver: AttackGiver,
    private val heavyGiver: AttackGiver,
    private val focusLeft: Int,
) {
    fun getLightGiver(): AttackGiver {
        return this.lightGiver
    }

    fun getMediumGiver(): AttackGiver {
        return this.mediumGiver
    }

    fun getHeavyGiver(): AttackGiver {
        return this.heavyGiver
    }

    fun getFocusLeft(): Int {
        return this.focusLeft
    }

    companion object {
        fun create(
            lightGiver: AttackGiver,
            mediumGiver: AttackGiver,
            heavyGiver: AttackGiver,
            focusLeft: Int,
        ): AttackPool {
            return AttackPool(
                lightGiver = lightGiver,
                mediumGiver = mediumGiver,
                heavyGiver = heavyGiver,
                focusLeft = focusLeft,
            )
        }
    }
}

data class Table(
    private val leftZone: HitZone,
    private val centerZone: HitZone,
    private val rightZone: HitZone,
    private val mySide: PlayerSide,
    private val opponentSide: PlayerSide,
) {
    fun getLeftZone(): HitZone {
        return this.leftZone
    }

    fun getCenterZone(): HitZone {
        return this.centerZone
    }

    fun getRightZone(): HitZone {
        return this.rightZone
    }

    fun getMySide(): PlayerSide {
        return this.mySide
    }

    fun getOpponentSide(): PlayerSide {
        return this.opponentSide
    }

    companion object {
        fun create(
            leftZone: HitZone,
            centerZone: HitZone,
            rightZone: HitZone,
            mySide: PlayerSide,
            opponentSide: PlayerSide,
        ): Table {
            return Table(
                leftZone = leftZone,
                centerZone = centerZone,
                rightZone = rightZone,
                mySide = mySide,
                opponentSide = opponentSide,
            )
        }
    }
}

data class Card(
    private val type: String,
    private val value: Int,
    private val focusCost: Int,
) {
    fun getType(): DamageType {
        return DamageType.valueOf(this.type)
    }

    fun getValue(): Int {
        return this.value
    }

    fun getFocusCost(): Int {
        return this.focusCost
    }

    companion object {
        fun create(
            type: DamageType,
            value: Int,
            focusCost: Int,
        ): Card {
            return Card(
                type = type.name,
                value = value,
                focusCost = focusCost,
            )
        }
    }
}

data class Hand(
    private val cards: List<Card>,
) {
    fun getCards(): List<Card> {
        return this.cards
    }

    companion object {
        fun create(
            cards: List<Card>,
        ): Hand {
            return Hand(
                cards = cards,
            )
        }
    }
}

data class GameState(
    private val turn: Int,
    private val phase: String,
    private val table: Table,
    private val hand: Hand,
    private val myReady: Boolean,
    private val opponentReady: Boolean,
) {
    fun getTurn(): Int {
        return this.turn
    }

    fun getPhase(): TurnPhase {
        return TurnPhase.valueOf(this.phase)
    }

    fun getTable(): Table {
        return this.table
    }

    fun getHand(): Hand {
        return this.hand
    }

    fun getMyReady(): Boolean {
        return this.myReady
    }

    fun getOpponentReady(): Boolean {
        return this.opponentReady
    }

    companion object {
        fun create(
            turn: Int,
            phase: TurnPhase,
            table: Table,
            hand: Hand,
            myReady: Boolean,
            opponentReady: Boolean,
        ): GameState {
            return GameState(
                turn = turn,
                phase = phase.name,
                table = table,
                hand = hand,
                myReady = myReady,
                opponentReady = opponentReady,
            )
        }
    }
}