// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.singlegame.web

import com.github.bratek20.architecture.serialization.api.Serializer
import com.github.bratek20.architecture.serialization.api.Struct
import com.github.bratek20.architecture.serialization.context.SerializationFactory

import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.github.bratek20.ostium.singlegame.api.*

@RestController
@RequestMapping("/singleGameApi")
class SingleGameApiController(
    private val api: SingleGameApi,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/getState")
    fun getState(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SingleGameApiGetStateRequest::class.java)
        return serializer.asStruct(SingleGameApiGetStateResponse(api.getState(request.getGameId())))
    }

    @PostMapping("/playCard")
    fun playCard(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SingleGameApiPlayCardRequest::class.java)
        return serializer.asStruct(SingleGameApiPlayCardResponse(api.playCard(request.getGameId(), request.getUser(), request.getCardId(), request.getRow())))
    }

    @PostMapping("/moveCard")
    fun moveCard(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, SingleGameApiMoveCardRequest::class.java)
        return serializer.asStruct(SingleGameApiMoveCardResponse(api.moveCard(request.getGameId(), request.getUser(), request.getCardId(), request.getFrom(), request.getTo())))
    }
}

