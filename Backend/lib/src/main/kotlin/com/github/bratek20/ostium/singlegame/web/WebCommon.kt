// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.singlegame.web

import com.github.bratek20.infrastructure.httpclient.api.HttpClientConfig

import com.github.bratek20.ostium.singlegame.api.*

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.user.api.*

class SingleGameWebClientConfig(
    val value: HttpClientConfig
) {
}
class SingleGameApiGetStateRequest(
    private val gameId: Int,
    private val user: String
) {
    fun getGameId(): GameId {
        return GameId(gameId)
    }
    fun getUser(): Username {
        return Username(user)
    }
    companion object {
        fun create(gameId: GameId, user: Username): SingleGameApiGetStateRequest {
            return SingleGameApiGetStateRequest(gameId.value, user.value)
        }
    }
}
class SingleGameApiGetStateResponse(
    private val value: GameState
) {
    fun getValue(): GameState {
        return value
    }
}
class SingleGameApiPlayCardRequest(
    private val gameId: Int,
    private val user: String,
    private val cardId: String,
    private val row: String
) {
    fun getGameId(): GameId {
        return GameId(gameId)
    }
    fun getUser(): Username {
        return Username(user)
    }
    fun getCardId(): CreatureCardId {
        return CreatureCardId(cardId)
    }
    fun getRow(): RowType {
        return RowType.valueOf(row)
    }
    companion object {
        fun create(gameId: GameId, user: Username, cardId: CreatureCardId, row: RowType): SingleGameApiPlayCardRequest {
            return SingleGameApiPlayCardRequest(gameId.value, user.value, cardId.value, row.name)
        }
    }
}
class SingleGameApiPlayCardResponse(
    private val value: GameState
) {
    fun getValue(): GameState {
        return value
    }
}
class SingleGameApiMoveCardRequest(
    private val gameId: Int,
    private val user: String,
    private val cardId: String,
    private val from: String,
    private val to: String
) {
    fun getGameId(): GameId {
        return GameId(gameId)
    }
    fun getUser(): Username {
        return Username(user)
    }
    fun getCardId(): CreatureCardId {
        return CreatureCardId(cardId)
    }
    fun getFrom(): RowType {
        return RowType.valueOf(from)
    }
    fun getTo(): RowType {
        return RowType.valueOf(to)
    }
    companion object {
        fun create(gameId: GameId, user: Username, cardId: CreatureCardId, from: RowType, to: RowType): SingleGameApiMoveCardRequest {
            return SingleGameApiMoveCardRequest(gameId.value, user.value, cardId.value, from.name, to.name)
        }
    }
}
class SingleGameApiMoveCardResponse(
    private val value: GameState
) {
    fun getValue(): GameState {
        return value
    }
}