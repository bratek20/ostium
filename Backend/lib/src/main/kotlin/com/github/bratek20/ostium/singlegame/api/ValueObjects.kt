// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.singlegame.api

import com.github.bratek20.ostium.gamesmanagement.api.*
import com.github.bratek20.ostium.user.api.*

data class CreatureCardId(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class CreatureCard(
    private val id: String,
) {
    fun getId(): CreatureCardId {
        return CreatureCardId(this.id)
    }

    companion object {
        fun create(
            id: CreatureCardId,
        ): CreatureCard {
            return CreatureCard(
                id = id.value,
            )
        }
    }
}

data class Row(
    private val type: String,
    private val card: CreatureCard?,
) {
    fun getType(): RowType {
        return RowType.valueOf(this.type)
    }

    fun getCard(): CreatureCard? {
        return this.card
    }

    companion object {
        fun create(
            type: RowType,
            card: CreatureCard?,
        ): Row {
            return Row(
                type = type.name,
                card = card,
            )
        }
    }
}

data class PlayerSide(
    private val attackRow: Row,
    private val defenseRow: Row,
) {
    fun getAttackRow(): Row {
        return this.attackRow
    }

    fun getDefenseRow(): Row {
        return this.defenseRow
    }

    companion object {
        fun create(
            attackRow: Row,
            defenseRow: Row,
        ): PlayerSide {
            return PlayerSide(
                attackRow = attackRow,
                defenseRow = defenseRow,
            )
        }
    }
}

data class Table(
    private val mySide: PlayerSide,
    private val opponentSide: PlayerSide,
) {
    fun getMySide(): PlayerSide {
        return this.mySide
    }

    fun getOpponentSide(): PlayerSide {
        return this.opponentSide
    }

    companion object {
        fun create(
            mySide: PlayerSide,
            opponentSide: PlayerSide,
        ): Table {
            return Table(
                mySide = mySide,
                opponentSide = opponentSide,
            )
        }
    }
}

data class Hand(
    private val cards: List<CreatureCard>,
) {
    fun getCards(): List<CreatureCard> {
        return this.cards
    }

    companion object {
        fun create(
            cards: List<CreatureCard>,
        ): Hand {
            return Hand(
                cards = cards,
            )
        }
    }
}

data class GameState(
    private val table: Table,
    private val myHand: Hand,
    private val opponentHand: Hand,
    private val myName: String,
    private val opponentName: String?,
) {
    fun getTable(): Table {
        return this.table
    }

    fun getMyHand(): Hand {
        return this.myHand
    }

    fun getOpponentHand(): Hand {
        return this.opponentHand
    }

    fun getMyName(): Username {
        return Username(this.myName)
    }

    fun getOpponentName(): Username? {
        return this.opponentName?.let { it -> Username(it) }
    }

    companion object {
        fun create(
            table: Table,
            myHand: Hand,
            opponentHand: Hand,
            myName: Username,
            opponentName: Username?,
        ): GameState {
            return GameState(
                table = table,
                myHand = myHand,
                opponentHand = opponentHand,
                myName = myName.value,
                opponentName = opponentName?.let { it -> it.value },
            )
        }
    }
}