// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.gamemodule.api

data class GateDurabilityMarker(
    val value: Int
) {
    override fun toString(): String {
        return value.toString()
    }

    operator fun plus(other: GateDurabilityMarker): GateDurabilityMarker {
        return GateDurabilityMarker(this.value + other.value)
    }

    operator fun minus(other: GateDurabilityMarker): GateDurabilityMarker {
        return GateDurabilityMarker(this.value - other.value)
    }

    operator fun times(amount: Int): GateDurabilityMarker {
        return GateDurabilityMarker(this.value * amount)
    }
}

data class CreatureCardId(
    val value: String
) {
    override fun toString(): String {
        return value.toString()
    }
}

data class CreatureCard(
    private val id: String,
) {
    fun getId(): CreatureCardId {
        return CreatureCardId(this.id)
    }

    companion object {
        fun create(
            id: CreatureCardId,
        ): CreatureCard {
            return CreatureCard(
                id = id.value,
            )
        }
    }
}

data class GateCard(
    private val destroyed: Boolean,
) {
    fun getDestroyed(): Boolean {
        return this.destroyed
    }

    companion object {
        fun create(
            destroyed: Boolean,
        ): GateCard {
            return GateCard(
                destroyed = destroyed,
            )
        }
    }
}

data class GateDurabilityCard(
    private val myMarker: Int,
    private val opponentMarker: Int,
) {
    fun getMyMarker(): GateDurabilityMarker {
        return GateDurabilityMarker(this.myMarker)
    }

    fun getOpponentMarker(): GateDurabilityMarker {
        return GateDurabilityMarker(this.opponentMarker)
    }

    companion object {
        fun create(
            myMarker: GateDurabilityMarker,
            opponentMarker: GateDurabilityMarker,
        ): GateDurabilityCard {
            return GateDurabilityCard(
                myMarker = myMarker.value,
                opponentMarker = opponentMarker.value,
            )
        }
    }
}

data class Row(
    private val card: CreatureCard?,
) {
    fun getCard(): CreatureCard? {
        return this.card
    }

    companion object {
        fun create(
            card: CreatureCard?,
        ): Row {
            return Row(
                card = card,
            )
        }
    }
}

data class Table(
    private val gateDurabilityCard: GateDurabilityCard,
    private val attackRow: Row,
    private val defenseRow: Row,
    private val gateCard: GateCard,
) {
    fun getGateDurabilityCard(): GateDurabilityCard {
        return this.gateDurabilityCard
    }

    fun getAttackRow(): Row {
        return this.attackRow
    }

    fun getDefenseRow(): Row {
        return this.defenseRow
    }

    fun getGateCard(): GateCard {
        return this.gateCard
    }

    companion object {
        fun create(
            gateDurabilityCard: GateDurabilityCard,
            attackRow: Row,
            defenseRow: Row,
            gateCard: GateCard,
        ): Table {
            return Table(
                gateDurabilityCard = gateDurabilityCard,
                attackRow = attackRow,
                defenseRow = defenseRow,
                gateCard = gateCard,
            )
        }
    }
}

data class Hand(
    private val cards: List<CreatureCard>,
) {
    fun getCards(): List<CreatureCard> {
        return this.cards
    }

    companion object {
        fun create(
            cards: List<CreatureCard>,
        ): Hand {
            return Hand(
                cards = cards,
            )
        }
    }
}

data class Game(
    private val table: Table,
    private val hand: Hand,
) {
    fun getTable(): Table {
        return this.table
    }

    fun getHand(): Hand {
        return this.hand
    }

    companion object {
        fun create(
            table: Table,
            hand: Hand,
        ): Game {
            return Game(
                table = table,
                hand = hand,
            )
        }
    }
}