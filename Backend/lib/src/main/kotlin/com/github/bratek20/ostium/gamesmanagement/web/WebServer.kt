// DO NOT EDIT! Autogenerated by HLA tool

package com.github.bratek20.ostium.gamesmanagement.web

import com.github.bratek20.architecture.serialization.api.Serializer
import com.github.bratek20.architecture.serialization.api.Struct
import com.github.bratek20.architecture.serialization.context.SerializationFactory

import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.github.bratek20.ostium.gamesmanagement.api.*

@RestController
@RequestMapping("/ostium/gamesManagementApi")
class GamesManagementApiController(
    private val api: GamesManagementApi,
) {
    private val serializer: Serializer = SerializationFactory.createSerializer()

    @PostMapping("/create")
    fun create(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, GamesManagementApiCreateRequest::class.java)
        return serializer.asStruct(GamesManagementApiCreateResponse(api.create(request.getCreator())))
    }

    @PostMapping("/join")
    fun join(@RequestBody rawRequest: Struct): Struct {
        val request = serializer.fromStruct(rawRequest, GamesManagementApiJoinRequest::class.java)
        return serializer.asStruct(GamesManagementApiJoinResponse(api.join(request.getJoiner(), request.getGameId())))
    }

    @PostMapping("/delete")
    fun delete(@RequestBody rawRequest: Struct): Unit {
        val request = serializer.fromStruct(rawRequest, GamesManagementApiDeleteRequest::class.java)
        api.delete(request.getGameId())
    }

    @PostMapping("/getAllCreated")
    fun getAllCreated(): Struct {
        // no request needed
        return serializer.asStruct(GamesManagementApiGetAllCreatedResponse(api.getAllCreated()))
    }
}

