// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using SingleGame.Api;
using User.Api;


namespace SingleGame
{
    public static class SingleGameBuilders
    {
        public static CreatureCardId BuildCreatureCardId(string value = "someValue")
        {
            return new CreatureCardId(value);
        }

        public class CreatureCardDef
        {
            public string Id { get; set; } = "someValue";
        }

        public static CreatureCard BuildCreatureCard(Action<CreatureCardDef> init = null)
        {
            var def = new CreatureCardDef();
            init?.Invoke(def);
            return CreatureCard.Create(new CreatureCardId(def.Id));
        }

        public class PlayerSideDef
        {
            public Action<CreatureCardDef> AttackRow { get; set; }
            public Action<CreatureCardDef> DefenseRow { get; set; }
        }

        public static PlayerSide BuildPlayerSide(Action<PlayerSideDef> init = null)
        {
            var def = new PlayerSideDef();
            init?.Invoke(def);
            return new PlayerSide(
                attackRow: new Row("ATTACK", def.AttackRow != null ? BuildCreatureCard(def.AttackRow) : null),
                defenseRow: new Row("DEFENSE", def.DefenseRow != null ? BuildCreatureCard(def.DefenseRow) : null)
            );
        }
        
        public class TableDef
        {
            public Action<PlayerSideDef> MySide { get; set; }
            public Action<PlayerSideDef> OpponentSide { get; set; }
        }

        public static Table BuildTable(Action<TableDef> init = null)
        {
            var def = new TableDef();
            init?.Invoke(def);
            return new Table(
                mySide: BuildPlayerSide(def.MySide),
                opponentSide: BuildPlayerSide(def.OpponentSide)
            );
        }

        public class HandDef
        {
            public List<Action<CreatureCardDef>> Cards { get; set; } = new List<Action<CreatureCardDef>>();
        }

        public static Hand BuildHand(Action<HandDef> init = null)
        {
            var def = new HandDef();
            init?.Invoke(def);
            return Hand.Create(
                cards: def.Cards.ConvertAll(BuildCreatureCard)
            );
        }

        public class GameDef
        {
            public Action<TableDef> Table { get; set; } = _ => { };
            public Action<HandDef> Hand { get; set; } = _ => { };
        }

        public static GameState BuildGame(Action<GameDef> init = null)
        {
            var def = new GameDef();
            init?.Invoke(def);
            return GameState.Create(
                table: BuildTable(def.Table),
                myHand: BuildHand(def.Hand),
                opponentHand: BuildHand(),
                myName: new Username(""),
                opponentName: Optional<Username>.Empty()
            );
        }
    }
}
