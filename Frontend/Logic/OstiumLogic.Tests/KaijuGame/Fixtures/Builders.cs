// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using KaijuGame.Api;

namespace KaijuGame
{
    public static class KaijuGameBuilders
    {
        public class AttackReceiverDef
        {
            public string Type { get; set; } = DamageType.Light.ToString();
            public int MyDamage { get; set; } = 0;
            public int OpponentDamage { get; set; } = 0;
        }

        public static AttackReceiver BuildAttackReceiver(Action<AttackReceiverDef> init = null)
        {
            var def = new AttackReceiverDef();
            init?.Invoke(def);
            return AttackReceiver.Create(
                type: Enum.Parse<DamageType>(def.Type),
                myDamage: def.MyDamage,
                opponentDamage: def.OpponentDamage
            );
        }

        public class AttackGiverDef
        {
            public string Type { get; set; } = DamageType.Light.ToString();
            public int DamageValue { get; set; } = 0;
        }

        public static AttackGiver BuildAttackGiver(Action<AttackGiverDef> init = null)
        {
            var def = new AttackGiverDef();
            init?.Invoke(def);
            return AttackGiver.Create(
                type: Enum.Parse<DamageType>(def.Type),
                damageValue: def.DamageValue
            );
        }

        public class PlayerSideDef
        {
            public Action<AttackPoolDef> Pool { get; set; }
            public List<Action<CardDef>> PlayedCards { get; set; } = new List<Action<CardDef>>();
        }

        public static PlayerSide BuildPlayerSide(Action<PlayerSideDef> init = null)
        {
            var def = new PlayerSideDef();
            init?.Invoke(def);
            return PlayerSide.Create(
                pool: BuildAttackPool(def.Pool),
                playedCards: def.PlayedCards.ConvertAll(BuildCard)
            );
        }

        public class HitZoneDef
        {
            public string Position { get; set; } = HitZonePosition.Left.ToString();
            public Action<AttackReceiverDef> LightReceiver { get; set; }
            public Action<AttackReceiverDef> MediumReceiver { get; set; }
            public Action<AttackReceiverDef> HeavyReceiver { get; set; }
        }

        public static HitZone BuildHitZone(Action<HitZoneDef> init = null)
        {
            var def = new HitZoneDef();
            init?.Invoke(def);
            return HitZone.Create(
                position: Enum.Parse<HitZonePosition>(def.Position),
                lightReceiver: BuildAttackReceiver(def.LightReceiver),
                mediumReceiver: BuildAttackReceiver(def.MediumReceiver),
                heavyReceiver: BuildAttackReceiver(def.HeavyReceiver)
            );
        }

        public class AttackPoolDef
        {
            public Action<AttackGiverDef> LightGiver { get; set; }
            public Action<AttackGiverDef> MediumGiver { get; set; }
            public Action<AttackGiverDef> HeavyGiver { get; set; }
            public int FocusLeft { get; set; } = 0;
        }

        public static AttackPool BuildAttackPool(Action<AttackPoolDef> init = null)
        {
            var def = new AttackPoolDef();
            init?.Invoke(def);
            return AttackPool.Create(
                lightGiver: BuildAttackGiver(def.LightGiver),
                mediumGiver: BuildAttackGiver(def.MediumGiver),
                heavyGiver: BuildAttackGiver(def.HeavyGiver),
                focusLeft: def.FocusLeft
            );
        }

        public class TableDef
        {
            public Action<HitZoneDef> LeftZone { get; set; }
            public Action<HitZoneDef> CenterZone { get; set; }
            public Action<HitZoneDef> RightZone { get; set; }
            public Action<PlayerSideDef> MySide { get; set; }
            public Action<PlayerSideDef> OpponentSide { get; set; }
        }

        public static Table BuildTable(Action<TableDef> init = null)
        {
            var def = new TableDef();
            init?.Invoke(def);
            return Table.Create(
                leftZone: BuildHitZone(def.LeftZone),
                centerZone: BuildHitZone(def.CenterZone),
                rightZone: BuildHitZone(def.RightZone),
                mySide: BuildPlayerSide(def.MySide),
                opponentSide: BuildPlayerSide(def.OpponentSide)
            );
        }

        public class CardDef
        {
            public string Type { get; set; } = DamageType.Light.ToString();
            public int Value { get; set; } = 0;
            public int FocusCost { get; set; } = 0;
        }

        public static Card BuildCard(Action<CardDef> init = null)
        {
            var def = new CardDef();
            init?.Invoke(def);
            return Card.Create(
                type: Enum.Parse<DamageType>(def.Type),
                value: def.Value,
                focusCost: def.FocusCost
            );
        }

        public class HandDef
        {
            public List<Action<CardDef>> Cards { get; set; } = new List<Action<CardDef>>();
        }

        public static Hand BuildHand(Action<HandDef> init = null)
        {
            var def = new HandDef();
            init?.Invoke(def);
            return Hand.Create(
                cards: def.Cards.ConvertAll(BuildCard)
            );
        }

        public class GameStateDef
        {
            public int Turn { get; set; } = 0;
            public string Phase { get; set; } = TurnPhase.PlayCard.ToString();
            public Action<TableDef> Table { get; set; }
            public Action<HandDef> Hand { get; set; }
            public bool MyReady { get; set; } = false;
            public bool OpponentReady { get; set; } = false;
        }

        public static GameState BuildGameState(Action<GameStateDef> init = null)
        {
            var def = new GameStateDef();
            init?.Invoke(def);
            return GameState.Create(
                turn: def.Turn,
                phase: Enum.Parse<TurnPhase>(def.Phase),
                table: BuildTable(def.Table),
                hand: BuildHand(def.Hand),
                myReady: def.MyReady,
                opponentReady: def.OpponentReady
            );
        }
    }
}
