// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;

namespace GameModule.Api {
    public class GateDurabilityMarker {
        public int Value { get; }

        public GateDurabilityMarker(
            int value
        ) {
            Value = value;
        }

        public override bool Equals(object? obj) {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Value == ((GateDurabilityMarker)obj).Value;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }
    }

    public class CreatureCardId {
        public string Value { get; }

        public CreatureCardId(
            string value
        ) {
            Value = value;
        }

        public override bool Equals(object? obj) {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Value == ((CreatureCardId)obj).Value;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }
    }

    public class CreatureCard {
        readonly string id;

        public CreatureCard(
            string id
        ) {
            this.id = id;
        }
        public CreatureCardId GetId() {
            return new CreatureCardId(id);
        }
        public static CreatureCard Create(CreatureCardId id) {
            return new CreatureCard(id.Value);
        }
    }

    public class GateCard {
        readonly bool destroyed;

        public GateCard(
            bool destroyed
        ) {
            this.destroyed = destroyed;
        }
        public bool GetDestroyed() {
            return destroyed;
        }
        public static GateCard Create(bool destroyed) {
            return new GateCard(destroyed);
        }
    }

    public class GateDurabilityCard {
        readonly int myMarker;
        readonly int opponentMarker;

        public GateDurabilityCard(
            int myMarker,
            int opponentMarker
        ) {
            this.myMarker = myMarker;
            this.opponentMarker = opponentMarker;
        }
        public GateDurabilityMarker GetMyMarker() {
            return new GateDurabilityMarker(myMarker);
        }
        public GateDurabilityMarker GetOpponentMarker() {
            return new GateDurabilityMarker(opponentMarker);
        }
        public static GateDurabilityCard Create(GateDurabilityMarker myMarker, GateDurabilityMarker opponentMarker) {
            return new GateDurabilityCard(myMarker.Value, opponentMarker.Value);
        }
    }

    public class Row {
        readonly CreatureCard? card;

        public Row(
            CreatureCard? card
        ) {
            this.card = card;
        }
        public Optional<CreatureCard> GetCard() {
            return Optional<CreatureCard>.Of(card);
        }
        public static Row Create(Optional<CreatureCard> card) {
            return new Row(card.OrElse(null));
        }
    }

    public class Table {
        readonly GateDurabilityCard gateDurabilityCard;
        readonly Row attackRow;
        readonly Row defenseRow;
        readonly GateCard gateCard;

        public Table(
            GateDurabilityCard gateDurabilityCard,
            Row attackRow,
            Row defenseRow,
            GateCard gateCard
        ) {
            this.gateDurabilityCard = gateDurabilityCard;
            this.attackRow = attackRow;
            this.defenseRow = defenseRow;
            this.gateCard = gateCard;
        }
        public GateDurabilityCard GetGateDurabilityCard() {
            return gateDurabilityCard;
        }
        public Row GetAttackRow() {
            return attackRow;
        }
        public Row GetDefenseRow() {
            return defenseRow;
        }
        public GateCard GetGateCard() {
            return gateCard;
        }
        public static Table Create(GateDurabilityCard gateDurabilityCard, Row attackRow, Row defenseRow, GateCard gateCard) {
            return new Table(gateDurabilityCard, attackRow, defenseRow, gateCard);
        }
    }

    public class Hand {
        readonly List<CreatureCard> cards;

        public Hand(
            List<CreatureCard> cards
        ) {
            this.cards = cards;
        }
        public List<CreatureCard> GetCards() {
            return cards;
        }
        public static Hand Create(List<CreatureCard> cards) {
            return new Hand(cards);
        }
    }

    public class Game {
        readonly Table table;
        readonly Hand hand;

        public Game(
            Table table,
            Hand hand
        ) {
            this.table = table;
            this.hand = hand;
        }
        public Table GetTable() {
            return table;
        }
        public Hand GetHand() {
            return hand;
        }
        public static Game Create(Table table, Hand hand) {
            return new Game(table, hand);
        }
    }
}