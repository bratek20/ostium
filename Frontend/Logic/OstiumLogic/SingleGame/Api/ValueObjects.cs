// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using GamesManagement.Api;
using User.Api;

namespace SingleGame.Api {
    public class CreatureCardId {
        public string Value { get; }

        public CreatureCardId(
            string value
        ) {
            Value = value;
        }

        public override bool Equals(object? obj) {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Value == ((CreatureCardId)obj).Value;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }
    }

    public class CreatureCard {
        readonly string id;

        public CreatureCard(
            string id
        ) {
            this.id = id;
        }
        public CreatureCardId GetId() {
            return new CreatureCardId(id);
        }
        public static CreatureCard Create(CreatureCardId id) {
            return new CreatureCard(id.Value);
        }
    }

    public class Row {
        readonly string type;
        readonly CreatureCard? card;

        public Row(
            string type,
            CreatureCard? card
        ) {
            this.type = type;
            this.card = card;
        }
        public RowType GetType() {
            return (RowType)Enum.Parse(typeof(RowType), type);
        }
        public Optional<CreatureCard> GetCard() {
            return Optional<CreatureCard>.Of(card);
        }
        public static Row Create(RowType type, Optional<CreatureCard> card) {
            return new Row(type.ToString(), card.OrElse(null));
        }
    }

    public class PlayerSide {
        readonly Row attackRow;
        readonly Row defenseRow;

        public PlayerSide(
            Row attackRow,
            Row defenseRow
        ) {
            this.attackRow = attackRow;
            this.defenseRow = defenseRow;
        }
        public Row GetAttackRow() {
            return attackRow;
        }
        public Row GetDefenseRow() {
            return defenseRow;
        }
        public static PlayerSide Create(Row attackRow, Row defenseRow) {
            return new PlayerSide(attackRow, defenseRow);
        }
    }

    public class Table {
        readonly PlayerSide mySide;
        readonly PlayerSide opponentSide;

        public Table(
            PlayerSide mySide,
            PlayerSide opponentSide
        ) {
            this.mySide = mySide;
            this.opponentSide = opponentSide;
        }
        public PlayerSide GetMySide() {
            return mySide;
        }
        public PlayerSide GetOpponentSide() {
            return opponentSide;
        }
        public static Table Create(PlayerSide mySide, PlayerSide opponentSide) {
            return new Table(mySide, opponentSide);
        }
    }

    public class Hand {
        readonly List<CreatureCard> cards;

        public Hand(
            List<CreatureCard> cards
        ) {
            this.cards = cards;
        }
        public List<CreatureCard> GetCards() {
            return cards;
        }
        public static Hand Create(List<CreatureCard> cards) {
            return new Hand(cards);
        }
    }

    public class GameState {
        readonly Table table;
        readonly Hand myHand;
        readonly Hand opponentHand;
        readonly string myName;
        readonly string? opponentName;

        public GameState(
            Table table,
            Hand myHand,
            Hand opponentHand,
            string myName,
            string? opponentName
        ) {
            this.table = table;
            this.myHand = myHand;
            this.opponentHand = opponentHand;
            this.myName = myName;
            this.opponentName = opponentName;
        }
        public Table GetTable() {
            return table;
        }
        public Hand GetMyHand() {
            return myHand;
        }
        public Hand GetOpponentHand() {
            return opponentHand;
        }
        public Username GetMyName() {
            return new Username(myName);
        }
        public Optional<Username> GetOpponentName() {
            return Optional<string>.Of(opponentName).Map( it => new Username(it) );
        }
        public static GameState Create(Table table, Hand myHand, Hand opponentHand, Username myName, Optional<Username> opponentName) {
            return new GameState(table, myHand, opponentHand, myName.Value, opponentName.Map( it => it.Value ).OrElse(null));
        }
    }
}