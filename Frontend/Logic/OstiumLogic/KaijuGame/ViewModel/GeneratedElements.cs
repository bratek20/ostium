// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using B20.Frontend.Traits;
using B20.Frontend.UiElements;
using KaijuGame.Api;
using GamesManagement.Api;

namespace KaijuGame.ViewModel {
    public partial class AttackReceiverVm: UiElement<AttackReceiver> {
        public EnumSwitch Type { get; set; }
        public Label MyDamage { get; set; }
        public Label OpponentDamage { get; set; }
        protected override void OnUpdate() {
            Type.Update(Model.GetType());
            MyDamage.Update(Model.GetMyDamage());
            OpponentDamage.Update(Model.GetOpponentDamage());
        }
    }

    public partial class AttackGiverVm: UiElement<AttackGiver> {
        public EnumSwitch Type { get; set; }
        public Label DamageValue { get; set; }
        protected override void OnUpdate() {
            Type.Update(Model.GetType());
            DamageValue.Update(Model.GetDamageValue());
        }
    }

    public partial class PlayerSideVm: UiElement<PlayerSide> {
        public AttackPoolVm Pool { get; set; }
        public CardVmGroup PlayedCards { get; set; }
        protected override List<Type> GetTraitTypes() {
            return new List<Type>() { typeof(WithRect) };
        }
        protected override void OnUpdate() {
            Pool.Update(Model.GetPool());
            PlayedCards.Update(Model.GetPlayedCards());
        }
    }

    public partial class HitZoneVm: UiElement<HitZone> {
        public EnumSwitch Position { get; set; }
        public AttackReceiverVm LightReceiver { get; set; }
        public AttackReceiverVm MediumReceiver { get; set; }
        public AttackReceiverVm HeavyReceiver { get; set; }
        protected override void OnUpdate() {
            Position.Update(Model.GetPosition());
            LightReceiver.Update(Model.GetLightReceiver());
            MediumReceiver.Update(Model.GetMediumReceiver());
            HeavyReceiver.Update(Model.GetHeavyReceiver());
        }
    }

    public partial class AttackPoolVm: UiElement<AttackPool> {
        public AttackGiverVm LightGiver { get; set; }
        public AttackGiverVm MediumGiver { get; set; }
        public AttackGiverVm HeavyGiver { get; set; }
        public Label FocusLeft { get; set; }
        protected override void OnUpdate() {
            LightGiver.Update(Model.GetLightGiver());
            MediumGiver.Update(Model.GetMediumGiver());
            HeavyGiver.Update(Model.GetHeavyGiver());
            FocusLeft.Update(Model.GetFocusLeft());
        }
    }

    public partial class TableVm: UiElement<Table> {
        public HitZoneVm LeftZone { get; set; }
        public HitZoneVm CenterZone { get; set; }
        public HitZoneVm RightZone { get; set; }
        public PlayerSideVm MySide { get; set; }
        public PlayerSideVm OpponentSide { get; set; }
        protected override void OnUpdate() {
            LeftZone.Update(Model.GetLeftZone());
            CenterZone.Update(Model.GetCenterZone());
            RightZone.Update(Model.GetRightZone());
            MySide.Update(Model.GetMySide());
            OpponentSide.Update(Model.GetOpponentSide());
        }
    }

    public partial class CardVm: UiElement<Card> {
        public EnumSwitch Type { get; set; }
        public Label Value { get; set; }
        public Label FocusCost { get; set; }
        protected override List<Type> GetTraitTypes() {
            return new List<Type>() { typeof(Draggable) };
        }
        protected override void OnUpdate() {
            Type.Update(Model.GetType());
            Value.Update(Model.GetValue());
            FocusCost.Update(Model.GetFocusCost());
        }
    }

    public partial class HandVm: UiElement<Hand> {
        public CardVmGroup Cards { get; set; }
        protected override void OnUpdate() {
            Cards.Update(Model.GetCards());
        }
    }

    public partial class GameStateVm: UiElement<GameState> {
        public Label Turn { get; set; }
        public EnumSwitch Phase { get; set; }
        public TableVm Table { get; set; }
        public HandVm Hand { get; set; }
        public BoolSwitch MyReady { get; set; }
        public BoolSwitch OpponentReady { get; set; }
        protected override void OnUpdate() {
            Turn.Update(Model.GetTurn());
            Phase.Update(Model.GetPhase());
            Table.Update(Model.GetTable());
            Hand.Update(Model.GetHand());
            MyReady.Update(Model.GetMyReady());
            OpponentReady.Update(Model.GetOpponentReady());
        }
    }

    public class CardVmGroup: UiElementGroup<CardVm, Card> {
        public CardVmGroup(
            B20.Architecture.Contexts.Api.Context c
        ): base(() => c.Get<CardVm>()) {
        }
    }
}