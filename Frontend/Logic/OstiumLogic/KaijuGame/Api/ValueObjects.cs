// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using GamesManagement.Api;

namespace KaijuGame.Api {
    public class AttackReceiver {
        readonly string type;
        readonly int myDamage;
        readonly int opponentDamage;

        public AttackReceiver(
            string type,
            int myDamage,
            int opponentDamage
        ) {
            this.type = type;
            this.myDamage = myDamage;
            this.opponentDamage = opponentDamage;
        }
        public DamageType GetType() {
            return (DamageType)Enum.Parse(typeof(DamageType), type);
        }
        public int GetMyDamage() {
            return myDamage;
        }
        public int GetOpponentDamage() {
            return opponentDamage;
        }
        public static AttackReceiver Create(DamageType type, int myDamage, int opponentDamage) {
            return new AttackReceiver(type.ToString(), myDamage, opponentDamage);
        }
    }

    public class AttackGiver {
        readonly string type;
        readonly int damageValue;

        public AttackGiver(
            string type,
            int damageValue
        ) {
            this.type = type;
            this.damageValue = damageValue;
        }
        public DamageType GetType() {
            return (DamageType)Enum.Parse(typeof(DamageType), type);
        }
        public int GetDamageValue() {
            return damageValue;
        }
        public static AttackGiver Create(DamageType type, int damageValue) {
            return new AttackGiver(type.ToString(), damageValue);
        }
    }

    public class PlayerSide {
        readonly AttackPool pool;
        readonly List<Card> playedCards;

        public PlayerSide(
            AttackPool pool,
            List<Card> playedCards
        ) {
            this.pool = pool;
            this.playedCards = playedCards;
        }
        public AttackPool GetPool() {
            return pool;
        }
        public List<Card> GetPlayedCards() {
            return playedCards;
        }
        public static PlayerSide Create(AttackPool pool, List<Card> playedCards) {
            return new PlayerSide(pool, playedCards);
        }
    }

    public class HitZone {
        readonly string position;
        readonly AttackReceiver lightReceiver;
        readonly AttackReceiver mediumReceiver;
        readonly AttackReceiver heavyReceiver;

        public HitZone(
            string position,
            AttackReceiver lightReceiver,
            AttackReceiver mediumReceiver,
            AttackReceiver heavyReceiver
        ) {
            this.position = position;
            this.lightReceiver = lightReceiver;
            this.mediumReceiver = mediumReceiver;
            this.heavyReceiver = heavyReceiver;
        }
        public HitZonePosition GetPosition() {
            return (HitZonePosition)Enum.Parse(typeof(HitZonePosition), position);
        }
        public AttackReceiver GetLightReceiver() {
            return lightReceiver;
        }
        public AttackReceiver GetMediumReceiver() {
            return mediumReceiver;
        }
        public AttackReceiver GetHeavyReceiver() {
            return heavyReceiver;
        }
        public static HitZone Create(HitZonePosition position, AttackReceiver lightReceiver, AttackReceiver mediumReceiver, AttackReceiver heavyReceiver) {
            return new HitZone(position.ToString(), lightReceiver, mediumReceiver, heavyReceiver);
        }
    }

    public class AttackPool {
        readonly AttackGiver lightGiver;
        readonly AttackGiver mediumGiver;
        readonly AttackGiver heavyGiver;
        readonly int focusLeft;

        public AttackPool(
            AttackGiver lightGiver,
            AttackGiver mediumGiver,
            AttackGiver heavyGiver,
            int focusLeft
        ) {
            this.lightGiver = lightGiver;
            this.mediumGiver = mediumGiver;
            this.heavyGiver = heavyGiver;
            this.focusLeft = focusLeft;
        }
        public AttackGiver GetLightGiver() {
            return lightGiver;
        }
        public AttackGiver GetMediumGiver() {
            return mediumGiver;
        }
        public AttackGiver GetHeavyGiver() {
            return heavyGiver;
        }
        public int GetFocusLeft() {
            return focusLeft;
        }
        public static AttackPool Create(AttackGiver lightGiver, AttackGiver mediumGiver, AttackGiver heavyGiver, int focusLeft) {
            return new AttackPool(lightGiver, mediumGiver, heavyGiver, focusLeft);
        }
    }

    public class Table {
        readonly HitZone leftZone;
        readonly HitZone centerZone;
        readonly HitZone rightZone;
        readonly PlayerSide mySide;
        readonly PlayerSide opponentSide;

        public Table(
            HitZone leftZone,
            HitZone centerZone,
            HitZone rightZone,
            PlayerSide mySide,
            PlayerSide opponentSide
        ) {
            this.leftZone = leftZone;
            this.centerZone = centerZone;
            this.rightZone = rightZone;
            this.mySide = mySide;
            this.opponentSide = opponentSide;
        }
        public HitZone GetLeftZone() {
            return leftZone;
        }
        public HitZone GetCenterZone() {
            return centerZone;
        }
        public HitZone GetRightZone() {
            return rightZone;
        }
        public PlayerSide GetMySide() {
            return mySide;
        }
        public PlayerSide GetOpponentSide() {
            return opponentSide;
        }
        public static Table Create(HitZone leftZone, HitZone centerZone, HitZone rightZone, PlayerSide mySide, PlayerSide opponentSide) {
            return new Table(leftZone, centerZone, rightZone, mySide, opponentSide);
        }
    }

    public class Card {
        readonly string type;
        readonly int value;
        readonly int focusCost;

        public Card(
            string type,
            int value,
            int focusCost
        ) {
            this.type = type;
            this.value = value;
            this.focusCost = focusCost;
        }
        public DamageType GetType() {
            return (DamageType)Enum.Parse(typeof(DamageType), type);
        }
        public int GetValue() {
            return value;
        }
        public int GetFocusCost() {
            return focusCost;
        }
        public static Card Create(DamageType type, int value, int focusCost) {
            return new Card(type.ToString(), value, focusCost);
        }
    }

    public class Hand {
        readonly List<Card> cards;

        public Hand(
            List<Card> cards
        ) {
            this.cards = cards;
        }
        public List<Card> GetCards() {
            return cards;
        }
        public static Hand Create(List<Card> cards) {
            return new Hand(cards);
        }
    }

    public class GameState {
        readonly int turn;
        readonly string phase;
        readonly Table table;
        readonly Hand hand;
        readonly bool myReady;
        readonly bool opponentReady;

        public GameState(
            int turn,
            string phase,
            Table table,
            Hand hand,
            bool myReady,
            bool opponentReady
        ) {
            this.turn = turn;
            this.phase = phase;
            this.table = table;
            this.hand = hand;
            this.myReady = myReady;
            this.opponentReady = opponentReady;
        }
        public int GetTurn() {
            return turn;
        }
        public TurnPhase GetPhase() {
            return (TurnPhase)Enum.Parse(typeof(TurnPhase), phase);
        }
        public Table GetTable() {
            return table;
        }
        public Hand GetHand() {
            return hand;
        }
        public bool GetMyReady() {
            return myReady;
        }
        public bool GetOpponentReady() {
            return opponentReady;
        }
        public static GameState Create(int turn, TurnPhase phase, Table table, Hand hand, bool myReady, bool opponentReady) {
            return new GameState(turn, phase.ToString(), table, hand, myReady, opponentReady);
        }
    }
}