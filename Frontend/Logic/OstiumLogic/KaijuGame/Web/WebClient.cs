// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using HttpClientModule.Api;
using KaijuGame.Api;
using GamesManagement.Api;

namespace KaijuGame.Web {
    public class GameApiWebClient: GameApi {
        readonly HttpClient client;

        public GameApiWebClient(
            HttpClientFactory factory,
            KaijuGameWebClientConfig config
        ) {
            this.client = factory.Create(config.Value);
        }
        /// <exception cref="GameNotFoundException"/>
        public GameState GetState(GameToken token) {
            return client.Post("/ostium/gameApi/getState", Optional<GameApiGetStateRequest>.Of(GameApiGetStateRequest.Create(token))).GetBody<GameApiGetStateResponse>().Get().GetValue();
        }
        public GameState EndPhase(GameToken token) {
            return client.Post("/ostium/gameApi/endPhase", Optional<GameApiEndPhaseRequest>.Of(GameApiEndPhaseRequest.Create(token))).GetBody<GameApiEndPhaseResponse>().Get().GetValue();
        }
        public GameState PlayCard(GameToken token, int handCardIdx) {
            return client.Post("/ostium/gameApi/playCard", Optional<GameApiPlayCardRequest>.Of(GameApiPlayCardRequest.Create(token, handCardIdx))).GetBody<GameApiPlayCardResponse>().Get().GetValue();
        }
        public GameState AssignDamage(GameToken token, HitZonePosition zone, DamageType damageType) {
            return client.Post("/ostium/gameApi/assignDamage", Optional<GameApiAssignDamageRequest>.Of(GameApiAssignDamageRequest.Create(token, zone, damageType))).GetBody<GameApiAssignDamageResponse>().Get().GetValue();
        }
        public GameState AssignGuard(GameToken token, HitZonePosition zone, DamageType damageType) {
            return client.Post("/ostium/gameApi/assignGuard", Optional<GameApiAssignGuardRequest>.Of(GameApiAssignGuardRequest.Create(token, zone, damageType))).GetBody<GameApiAssignGuardResponse>().Get().GetValue();
        }
    }
}