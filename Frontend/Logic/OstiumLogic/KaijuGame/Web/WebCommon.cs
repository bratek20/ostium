// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using HttpClientModule.Api;
using KaijuGame.Api;
using GamesManagement.Api;

namespace KaijuGame.Web {
    public class KaijuGameWebClientConfig {
        public HttpClientConfig Value { get; }

        public KaijuGameWebClientConfig(
            HttpClientConfig value
        ) {
            Value = value;
        }
    }

    public class GameApiGetStateRequest {
        readonly GameToken token;

        public GameApiGetStateRequest(
            GameToken token
        ) {
            this.token = token;
        }
        public GameToken GetToken() {
            return token;
        }
        public static GameApiGetStateRequest Create(GameToken token) {
            return new GameApiGetStateRequest(token);
        }
    }

    public class GameApiGetStateResponse {
        readonly GameState value;

        public GameApiGetStateResponse(
            GameState value
        ) {
            this.value = value;
        }
        public GameState GetValue() {
            return value;
        }
    }

    public class GameApiEndPhaseRequest {
        readonly GameToken token;

        public GameApiEndPhaseRequest(
            GameToken token
        ) {
            this.token = token;
        }
        public GameToken GetToken() {
            return token;
        }
        public static GameApiEndPhaseRequest Create(GameToken token) {
            return new GameApiEndPhaseRequest(token);
        }
    }

    public class GameApiEndPhaseResponse {
        readonly GameState value;

        public GameApiEndPhaseResponse(
            GameState value
        ) {
            this.value = value;
        }
        public GameState GetValue() {
            return value;
        }
    }

    public class GameApiPlayCardRequest {
        readonly GameToken token;
        readonly int handCardIdx;

        public GameApiPlayCardRequest(
            GameToken token,
            int handCardIdx
        ) {
            this.token = token;
            this.handCardIdx = handCardIdx;
        }
        public GameToken GetToken() {
            return token;
        }
        public int GetHandCardIdx() {
            return handCardIdx;
        }
        public static GameApiPlayCardRequest Create(GameToken token, int handCardIdx) {
            return new GameApiPlayCardRequest(token, handCardIdx);
        }
    }

    public class GameApiPlayCardResponse {
        readonly GameState value;

        public GameApiPlayCardResponse(
            GameState value
        ) {
            this.value = value;
        }
        public GameState GetValue() {
            return value;
        }
    }

    public class GameApiAssignDamageRequest {
        readonly GameToken token;
        readonly string zone;
        readonly string damageType;

        public GameApiAssignDamageRequest(
            GameToken token,
            string zone,
            string damageType
        ) {
            this.token = token;
            this.zone = zone;
            this.damageType = damageType;
        }
        public GameToken GetToken() {
            return token;
        }
        public HitZonePosition GetZone() {
            return (HitZonePosition)Enum.Parse(typeof(HitZonePosition), zone);
        }
        public DamageType GetDamageType() {
            return (DamageType)Enum.Parse(typeof(DamageType), damageType);
        }
        public static GameApiAssignDamageRequest Create(GameToken token, HitZonePosition zone, DamageType damageType) {
            return new GameApiAssignDamageRequest(token, zone.ToString(), damageType.ToString());
        }
    }

    public class GameApiAssignDamageResponse {
        readonly GameState value;

        public GameApiAssignDamageResponse(
            GameState value
        ) {
            this.value = value;
        }
        public GameState GetValue() {
            return value;
        }
    }

    public class GameApiAssignGuardRequest {
        readonly GameToken token;
        readonly string zone;
        readonly string damageType;

        public GameApiAssignGuardRequest(
            GameToken token,
            string zone,
            string damageType
        ) {
            this.token = token;
            this.zone = zone;
            this.damageType = damageType;
        }
        public GameToken GetToken() {
            return token;
        }
        public HitZonePosition GetZone() {
            return (HitZonePosition)Enum.Parse(typeof(HitZonePosition), zone);
        }
        public DamageType GetDamageType() {
            return (DamageType)Enum.Parse(typeof(DamageType), damageType);
        }
        public static GameApiAssignGuardRequest Create(GameToken token, HitZonePosition zone, DamageType damageType) {
            return new GameApiAssignGuardRequest(token, zone.ToString(), damageType.ToString());
        }
    }

    public class GameApiAssignGuardResponse {
        readonly GameState value;

        public GameApiAssignGuardResponse(
            GameState value
        ) {
            this.value = value;
        }
        public GameState GetValue() {
            return value;
        }
    }
}