// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;
using User.Api;

namespace GamesManagement.Api {
    public class GameId {
        public int Value { get; }

        public GameId(
            int value
        ) {
            Value = value;
        }

        public override bool Equals(object? obj) {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Value == ((GameId)obj).Value;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }
    }

    public class GameToken {
        readonly int gameId;
        readonly string username;

        public GameToken(
            int gameId,
            string username
        ) {
            this.gameId = gameId;
            this.username = username;
        }
        public GameId GetGameId() {
            return new GameId(gameId);
        }
        public Username GetUsername() {
            return new Username(username);
        }
        public static GameToken Create(GameId gameId, Username username) {
            return new GameToken(gameId.Value, username.Value);
        }
    }

    public class CreatedGame {
        readonly int id;
        readonly string creator;
        readonly string? joiner;

        public CreatedGame(
            int id,
            string creator,
            string? joiner
        ) {
            this.id = id;
            this.creator = creator;
            this.joiner = joiner;
        }
        public GameId GetId() {
            return new GameId(id);
        }
        public Username GetCreator() {
            return new Username(creator);
        }
        public Optional<Username> GetJoiner() {
            return Optional<string>.Of(joiner).Map( it => new Username(it) );
        }
        public static CreatedGame Create(GameId id, Username creator, Optional<Username> joiner) {
            return new CreatedGame(id.Value, creator.Value, joiner.Map( it => it.Value ).OrElse(null));
        }
    }
}