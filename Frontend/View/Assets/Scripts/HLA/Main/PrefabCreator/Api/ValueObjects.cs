// DO NOT EDIT! Autogenerated by HLA tool

using System;
using System.Collections.Generic;
using B20.Ext;

namespace PrefabCreator.Api {
    public class PrefabChildBlueprint {
        readonly string name;
        readonly string viewType;

        public PrefabChildBlueprint(
            string name,
            string viewType
        ) {
            this.name = name;
            this.viewType = viewType;
        }
        public string GetName() {
            return name;
        }
        public string GetViewType() {
            return viewType;
        }
        public static PrefabChildBlueprint Create(string name, string viewType) {
            return new PrefabChildBlueprint(name, viewType);
        }
    }

    public class PrefabBlueprint {
        readonly string blueprintType;
        readonly string name;
        readonly string viewType;
        readonly int creationOrder;
        readonly List<PrefabChildBlueprint> children;

        public PrefabBlueprint(
            string blueprintType,
            string name,
            string viewType,
            int creationOrder,
            List<PrefabChildBlueprint> children
        ) {
            this.blueprintType = blueprintType;
            this.name = name;
            this.viewType = viewType;
            this.creationOrder = creationOrder;
            this.children = children;
        }
        public BlueprintType GetBlueprintType() {
            return (BlueprintType)Enum.Parse(typeof(BlueprintType), blueprintType);
        }
        public string GetName() {
            return name;
        }
        public string GetViewType() {
            return viewType;
        }
        public int GetCreationOrder() {
            return creationOrder;
        }
        public List<PrefabChildBlueprint> GetChildren() {
            return children;
        }
        public static PrefabBlueprint Create(BlueprintType blueprintType, string name, string viewType, int creationOrder, List<PrefabChildBlueprint> children) {
            return new PrefabBlueprint(blueprintType.ToString(), name, viewType, creationOrder, children);
        }
    }
}